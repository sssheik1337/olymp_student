"""–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –í–£–ó–∞—Ö –∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏."""

from __future__ import annotations

from typing import Sequence

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from bot.keyboards.universities import (
    BACK_TO_LIST_CALLBACK,
    UNIVERSITY_CALLBACK_PREFIX,
    build_universities_keyboard,
    build_university_details_keyboard,
)
from bot.services.universities_service import (
    UniversityDetail,
    UniversityRecommendation,
    get_universities_service,
)
from bot.utils import texts

router = Router(name="user_universities")


def _format_universities_overview(
    recommendations: Sequence[UniversityRecommendation],
) -> str:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –í–£–ó–æ–≤."""

    lines: list[str] = [texts.MAIN_MENU_UNIVERSITIES, ""]
    lines.extend(texts.UNIVERSITIES_HINT)
    lines.append("")

    if not recommendations:
        lines.append(
            "–ü–æ–∫–∞ —á—Ç–æ –º—ã –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –í–£–ó–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—ã —á–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥ ‚Äî "
            "–∏ –º—ã –ø–æ–¥–±–µ—Ä—ë–º –ª—å–≥–æ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
        return "\n".join(lines).strip()

    lines.append("–ü–æ–¥–æ–±—Ä–∞–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã, –≥–¥–µ —É—á–∏—Ç—ã–≤–∞—é—Ç –≤–∞—à–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã:")
    for item in recommendations:
        lines.append(f"‚Ä¢ {item.name}")
        lines.append(f"  {item.description}")
        if item.matched_olympiads:
            lines.append(
                "  –ü–æ–¥—Ö–æ–¥–∏—Ç –∑–∞: " + ", ".join(sorted(item.matched_olympiads)) + "."
            )
        if item.benefits:
            lines.append("  –õ—å–≥–æ—Ç—ã:")
            for benefit in item.benefits:
                lines.append(f"    ‚Ä¢ {benefit}")
        lines.append("")

    return "\n".join(lines).strip()


def _format_university_details(detail: UniversityDetail) -> str:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É –í–£–ó—É."""

    lines: list[str] = [f"üéì {detail.name}", ""]
    lines.append(detail.description)
    lines.append("")
    if detail.matched_olympiads:
        lines.append("–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –ø—Ä–∏—ë–º–µ:")
        for title in sorted(detail.matched_olympiads):
            lines.append(f"‚Ä¢ {title}")
        lines.append("")
    if detail.benefits:
        lines.append("–ö–∞–∫–∏–µ –ª—å–≥–æ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã:")
        for benefit in detail.benefits:
            lines.append(f"‚Ä¢ {benefit}")
        lines.append("")
    if detail.faculties:
        lines.append("–§–∞–∫—É–ª—å—Ç–µ—Ç—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        for faculty in detail.faculties:
            lines.append(f"üè´ {faculty.title}")
            lines.append(f"   {faculty.description}")
            if faculty.benefits:
                for benefit in faculty.benefits:
                    lines.append(f"   ‚Ä¢ {benefit}")
            lines.append("")
    return "\n".join(lines).strip()


async def _send_universities_overview(
    message: Message,
    tg_user_id: int,
    *,
    edit: bool,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –í–£–ó–æ–≤."""

    service = get_universities_service()
    recommendations = await service.list_recommendations(tg_user_id=tg_user_id)
    text = _format_universities_overview(recommendations)
    keyboard = build_universities_keyboard(
        [(item.id, item.name) for item in recommendations]
    )

    if edit:
        try:
            await message.edit_text(text, reply_markup=keyboard)
            return
        except TelegramBadRequest:
            pass
    await message.answer(text, reply_markup=keyboard)


@router.message(Command("universities"))
async def open_universities_command(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª –í–£–ó–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ."""

    user = message.from_user
    if user is None:
        return
    await _send_universities_overview(message, user.id, edit=False)


@router.callback_query(F.data == "menu:universities")
async def open_universities_from_menu(callback: CallbackQuery) -> None:
    """–û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª –í–£–ó–æ–≤ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

    await callback.answer()
    message = callback.message
    if message is None:
        return
    await _send_universities_overview(message, callback.from_user.id, edit=False)


@router.callback_query(F.data == BACK_TO_LIST_CALLBACK)
async def return_to_universities_list(callback: CallbackQuery) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""

    await callback.answer()
    message = callback.message
    if message is None:
        return
    await _send_universities_overview(message, callback.from_user.id, edit=True)


@router.callback_query(F.data.startswith(UNIVERSITY_CALLBACK_PREFIX))
async def open_university_details(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –í–£–ó—É."""

    await callback.answer()
    message = callback.message
    if message is None:
        return

    payload = callback.data or ""
    raw_id = payload.removeprefix(UNIVERSITY_CALLBACK_PREFIX)
    try:
        university_id = int(raw_id)
    except ValueError:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    service = get_universities_service()
    detail = await service.get_details(
        tg_user_id=callback.from_user.id, university_id=university_id
    )
    if detail is None:
        await message.answer(
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.",
        )
        return

    text = _format_university_details(detail)
    keyboard = build_university_details_keyboard()
    try:
        await message.edit_text(text, reply_markup=keyboard)
    except TelegramBadRequest:
        await message.answer(text, reply_markup=keyboard)


__all__ = ["router"]
