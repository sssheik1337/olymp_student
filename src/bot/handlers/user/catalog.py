"""–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –æ–ª–∏–º–ø–∏–∞–¥."""

from __future__ import annotations

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from bot.keyboards.catalog import (
    BACK_TO_SUBJECTS_CALLBACK,
    build_olympiads_keyboard,
    build_subjects_keyboard,
)
from bot.services.olympiad_service import get_olympiad_service
from bot.utils import texts


router = Router(name="user_catalog")


def _format_catalog_intro() -> str:
    lines = [texts.MAIN_MENU_CATALOG, ""]
    lines.extend(texts.CATALOG_HINT)
    return "\n".join(lines)


def _format_olympiads_text(subject_title: str, olympiads: list) -> str:
    lines: list[str] = [f"üìö {subject_title}", ""]
    if olympiads:
        lines.append("–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:")
        for item in olympiads:
            details: list[str] = []
            if item.reg_deadline:
                details.append(f"—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ {item.reg_deadline.strftime('%d.%m.%Y')}")
            if item.round_date:
                details.append(f"—Ç—É—Ä {item.round_date.strftime('%d.%m.%Y')}")
            suffix = f" ({', '.join(details)})" if details else ""
            lines.append(f"‚Ä¢ {item.title}{suffix}")
            if item.description:
                lines.append(f"  {item.description}")
        lines.append("")
        lines.append("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É –≤ ‚ù§ –ú–æ–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã.")
    else:
        lines.append("–°–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ.")
    return "\n".join(lines)


async def _show_subjects(message: Message, *, edit: bool = False) -> None:
    service = get_olympiad_service()
    subjects = [(subject.code, subject.title) for subject in service.list_subjects()]
    keyboard = build_subjects_keyboard(subjects)
    text = _format_catalog_intro()
    if edit:
        await message.edit_text(text, reply_markup=keyboard)
    else:
        await message.answer(text, reply_markup=keyboard)


@router.message(Command("catalog"))
async def handle_catalog_command(message: Message) -> None:
    """–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø–æ –∫–æ–º–∞–Ω–¥–µ."""

    await _show_subjects(message, edit=False)


@router.callback_query(F.data == "menu:catalog")
async def open_catalog_from_menu(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

    await callback.answer()
    message = callback.message
    if message is None:
        return
    await _show_subjects(message, edit=False)


@router.callback_query(F.data.startswith("subj:"))
async def handle_subject_selection(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞."""

    await callback.answer()

    message = callback.message
    if message is None:
        return

    payload = callback.data or ""
    if payload == BACK_TO_SUBJECTS_CALLBACK:
        await _show_subjects(message, edit=True)
        return

    _, _, subject_code = payload.partition(":")

    service = get_olympiad_service()
    subject = service.get_subject(subject_code)
    if subject is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.")
        return

    olympiads = list(service.list_olympiads(subject.code))
    keyboard = build_olympiads_keyboard([(item.id, item.title) for item in olympiads])
    text = _format_olympiads_text(subject.title, olympiads)
    await message.edit_text(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("olymp:"))
async def handle_add_to_favorites(callback: CallbackQuery) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ª–∏–º–ø–∏–∞–¥—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    payload = callback.data or ""
    _, _, raw_id = payload.partition(":")
    try:
        olympiad_id = int(raw_id)
    except ValueError:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É", show_alert=True)
        return

    message = callback.message
    if message is None:
        await callback.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ", show_alert=True)
        return

    service = get_olympiad_service()
    try:
        added = await service.add_to_favorites(
            tg_user_id=callback.from_user.id,
            olympiad_id=olympiad_id,
            username=callback.from_user.username,
        )
    except ValueError:
        await callback.answer("–û–ª–∏–º–ø–∏–∞–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return

    if added:
        confirmation = "\n".join(texts.CONFIRM_FAVORITE_ADDED)
        await message.answer(confirmation)
        await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ú®")
    else:
        await callback.answer("–≠—Ç–∞ –æ–ª–∏–º–ø–∏–∞–¥–∞ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º", show_alert=True)


__all__ = ["router"]
