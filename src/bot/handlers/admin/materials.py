"""–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –≤ –∞–¥–º–∏–Ω–∫–µ."""

from __future__ import annotations

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message

from typing import Sequence

from bot.config import get_config
from bot.keyboards.admin_menu import ADMIN_BACK_CALLBACK, ADMIN_MATERIALS_CALLBACK
from bot.services.materials_service import (
    AdminMaterial,
    MaterialsService,
    get_materials_service,
)

router = Router(name="admin_materials")

_settings = get_config()
_admin_ids = set(_settings.admin_ids)
_service: MaterialsService = get_materials_service()

ADD_MATERIAL_CALLBACK = "admin:materials:add"
EDIT_MATERIAL_PREFIX = "admin:materials:edit:"
DELETE_MATERIAL_PREFIX = "admin:materials:delete:"
LIST_MATERIALS_CALLBACK = ADMIN_MATERIALS_CALLBACK


class MaterialForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ."""

    waiting_for_olympiad_id = State()
    waiting_for_title = State()
    waiting_for_url = State()


def _is_admin(user_id: int | None) -> bool:
    return user_id is not None and user_id in _admin_ids


def _format_materials_overview(materials: Sequence[AdminMaterial]) -> str:
    if not materials:
        return (
            "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."
            "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª¬ª, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ä–µ—Å—É—Ä—Å."
        )

    lines = ["–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:", ""]
    for item in materials:
        lines.append(
            f"#{item.id}: {item.title} (–æ–ª–∏–º–ø–∏–∞–¥–∞ {item.olympiad_id})"
        )
        lines.append(f"‚Üó {item.url}")
        if item.added_by_admin_id:
            lines.append(f"–î–æ–±–∞–≤–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {item.added_by_admin_id}")
        lines.append("")
    lines.append("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å.")
    return "\n".join(lines)


def _build_materials_keyboard(materials: Sequence[AdminMaterial]):
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

    inline_keyboard: list[list[InlineKeyboardButton]] = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data=ADD_MATERIAL_CALLBACK)]
    ]
    for item in materials:
        inline_keyboard.append(
            [
                InlineKeyboardButton(
                    text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å #{item.id}",
                    callback_data=f"{EDIT_MATERIAL_PREFIX}{item.id}",
                ),
                InlineKeyboardButton(
                    text=f"üóë –£–¥–∞–ª–∏—Ç—å #{item.id}",
                    callback_data=f"{DELETE_MATERIAL_PREFIX}{item.id}",
                ),
            ]
        )
    inline_keyboard.append(
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=ADMIN_BACK_CALLBACK)]
    )
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def _send_materials_overview(message: Message, *, edit: bool = False) -> None:
    materials = await _service.list_admin_materials()
    text = _format_materials_overview(materials)
    keyboard = _build_materials_keyboard(materials)
    if edit:
        await message.edit_text(text, reply_markup=keyboard)
    else:
        await message.answer(text, reply_markup=keyboard)


async def _reject_non_admin(callback: CallbackQuery) -> bool:
    user = callback.from_user
    if not _is_admin(user.id if user else None):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return True
    return False


async def _reject_non_admin_message(message: Message, state: FSMContext) -> bool:
    user = message.from_user
    if not _is_admin(user.id if user else None):
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        await state.clear()
        return True
    return False


@router.callback_query(F.data == LIST_MATERIALS_CALLBACK)
async def list_materials(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""

    if await _reject_non_admin(callback):
        return

    message = callback.message
    if message is None:
        await callback.answer()
        return

    await callback.answer()
    await _send_materials_overview(message, edit=True)


@router.message(Command("admin_materials"))
async def list_materials_command(message: Message) -> None:
    """–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏."""

    if not _is_admin(message.from_user.id if message.from_user else None):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    await _send_materials_overview(message, edit=False)


@router.callback_query(F.data == ADD_MATERIAL_CALLBACK)
async def start_add_material(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞."""

    if await _reject_non_admin(callback):
        return

    await callback.answer()
    message = callback.message
    if message is not None:
        try:
            await message.edit_reply_markup()
        except TelegramBadRequest:
            pass

    await state.set_state(MaterialForm.waiting_for_olympiad_id)
    await state.update_data(mode="create")

    if message is not None:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ ID –æ–ª–∏–º–ø–∏–∞–¥—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª."
        )


@router.callback_query(F.data.startswith(EDIT_MATERIAL_PREFIX))
async def start_edit_material(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞."""

    if await _reject_non_admin(callback):
        return

    payload = callback.data or ""
    raw_id = payload.removeprefix(EDIT_MATERIAL_PREFIX)
    try:
        material_id = int(raw_id)
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", show_alert=True)
        return

    material = await _service.get_material(material_id)
    if material is None:
        await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await callback.answer()
    message = callback.message
    if message is not None:
        try:
            await message.edit_reply_markup()
        except TelegramBadRequest:
            pass

    await state.set_state(MaterialForm.waiting_for_olympiad_id)
    await state.update_data(
        mode="edit",
        material_id=material.id,
        prev_title=material.title,
        prev_url=material.url,
    )

    prompt = (
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ #{id}."
        "\n–¢–µ–∫—É—â–∏–π ID –æ–ª–∏–º–ø–∏–∞–¥—ã: {olympiad}."
        "\n–ù–∞–∑–≤–∞–Ω–∏–µ: {title}."
        "\n–°—Å—ã–ª–∫–∞: {url}."
        "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID –æ–ª–∏–º–ø–∏–∞–¥—ã.".format(
            id=material.id,
            olympiad=material.olympiad_id,
            title=material.title,
            url=material.url,
        )
    )
    if message is not None:
        await message.answer(prompt)


@router.callback_query(F.data.startswith(DELETE_MATERIAL_PREFIX))
async def delete_material(callback: CallbackQuery) -> None:
    """–£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –±–∞–∑—ã."""

    if await _reject_non_admin(callback):
        return

    payload = callback.data or ""
    raw_id = payload.removeprefix(DELETE_MATERIAL_PREFIX)
    try:
        material_id = int(raw_id)
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", show_alert=True)
        return

    success = await _service.delete_material(material_id)
    if not success:
        await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª —É–∂–µ —É–¥–∞–ª—ë–Ω", show_alert=True)
        return

    await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª—ë–Ω")
    message = callback.message
    if message is not None:
        await _send_materials_overview(message, edit=True)


@router.message(MaterialForm.waiting_for_olympiad_id)
async def process_olympiad_id(message: Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å olympiad_id –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ."""

    if await _reject_non_admin_message(message, state):
        return

    try:
        olympiad_id = int((message.text or "").strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –æ–ª–∏–º–ø–∏–∞–¥—ã.")
        return

    await state.update_data(olympiad_id=olympiad_id)
    await state.set_state(MaterialForm.waiting_for_title)
    data = await state.get_data()
    if data.get("mode") == "edit":
        prev_title = data.get("prev_title")
        hint = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (—Å–µ–π—á–∞—Å: {prev_title})."
    else:
        hint = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞."
    await message.answer(hint)


@router.message(MaterialForm.waiting_for_title)
async def process_title(message: Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Å—ã–ª–∫—É."""

    if await _reject_non_admin_message(message, state):
        return

    title = (message.text or "").strip()
    if not title:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(title=title)
    await state.set_state(MaterialForm.waiting_for_url)
    data = await state.get_data()
    if data.get("mode") == "edit":
        prev_url = data.get("prev_url")
        hint = f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É (—Å–µ–π—á–∞—Å: {prev_url})."
    else:
        hint = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª."
    await message.answer(hint)


@router.message(MaterialForm.waiting_for_url)
async def process_url(message: Message, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞."""

    if await _reject_non_admin_message(message, state):
        return

    url = (message.text or "").strip()
    if not url:
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data = await state.get_data()
    olympiad_id = data.get("olympiad_id")
    title = data.get("title")
    mode = data.get("mode")

    await state.clear()

    if olympiad_id is None or title is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    admin_id = message.from_user.id if message.from_user else None
    if admin_id is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if mode == "edit":
        material_id = data.get("material_id")
        if material_id is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return
        updated = await _service.update_material(
            material_id=material_id,
            olympiad_id=olympiad_id,
            title=title,
            url=url,
            admin_tg_id=admin_id,
        )
        if not updated:
            await message.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω.")
            return
        await message.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        await _service.create_material(
            olympiad_id=olympiad_id,
            title=title,
            url=url,
            admin_tg_id=admin_id,
        )
        await message.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω.")

    await _send_materials_overview(message, edit=False)


__all__ = ["router"]
