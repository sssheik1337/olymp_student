"""–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∑–∞–≥–ª—É—à–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""

from __future__ import annotations

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from ...keyboards.calendar import build_calendar_keyboard
from ...services.calendar_service_stub import get_calendar_service
from ...utils import texts

router = Router(name="user_calendar_sync_stub")


def _format_calendar_text(link: str) -> str:
    lines: list[str] = [texts.MAIN_MENU_CALENDAR, ""]
    lines.extend(texts.CALENDAR_HINT)
    lines.append("")
    lines.append(f"üîó –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}")
    lines.append("")
    lines.append("–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.")
    return "\n".join(lines)


async def _send_calendar_screen(message: Message, link: str, *, edit: bool) -> None:
    text = _format_calendar_text(link)
    keyboard = build_calendar_keyboard()
    if edit:
        await message.edit_text(text, reply_markup=keyboard)
    else:
        await message.answer(text, reply_markup=keyboard)


@router.message(Command("calendar"))
async def open_calendar_command(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ."""

    service = get_calendar_service()
    user_id = message.from_user.id if message.from_user else 0
    link = service.generate_unique_link(user_id)
    await _send_calendar_screen(message, link, edit=False)


@router.callback_query(F.data == "menu:calendar")
async def open_calendar_from_menu(callback: CallbackQuery) -> None:
    """–û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

    await callback.answer()
    message = callback.message
    if message is None:
        return
    service = get_calendar_service()
    link = service.generate_unique_link(callback.from_user.id)
    await _send_calendar_screen(message, link, edit=True)


@router.callback_query(F.data == "calendar:link")
async def refresh_calendar_link(callback: CallbackQuery) -> None:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É."""

    service = get_calendar_service()
    link = service.generate_unique_link(callback.from_user.id)
    message = callback.message
    if message is not None:
        await _send_calendar_screen(message, link, edit=True)
    await callback.answer("–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")


@router.callback_query(F.data == "calendar:confirm")
async def confirm_calendar_sync(callback: CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (–∑–∞–≥–ª—É—à–∫–∞)."""

    service = get_calendar_service()
    service.confirm_synchronization(callback.from_user.id)
    await callback.answer("–ì–æ—Ç–æ–≤–æ!", show_alert=False)
    message = callback.message
    if message is not None:
        confirmation = "\n".join(texts.CONFIRM_CALENDAR_SYNC)
        await message.answer(confirmation)


__all__ = ["router"]
