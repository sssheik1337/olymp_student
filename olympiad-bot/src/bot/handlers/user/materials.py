"""–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏."""

from __future__ import annotations

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message

from ...keyboards.favorites import MATERIALS_CALLBACK_PREFIX
from ...services.materials_service import get_materials_service
from ...services.olympiad_service import get_olympiad_service

router = Router(name="user_materials")


def _format_materials_text(olympiad_title: str, bundle) -> str:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –ø–æ–¥–±–æ—Ä–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""

    lines = ["üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏", ""]
    lines.append(f"–î–ª—è –æ–ª–∏–º–ø–∏–∞–¥—ã: {olympiad_title}")
    lines.append("")

    categories = [
        ("–ó–∞–¥–∞—á–∏ –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç", bundle.past_problems),
        ("–¢–µ–æ—Ä–∏—è –∏ –≤–∏–¥–µ–æ—Ä–∞–∑–±–æ—Ä—ã", bundle.theory),
        ("–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –º–µ—Ç–æ–¥–∏—á–∫–∏", bundle.articles),
    ]
    for title, links in categories:
        lines.append(f"{title}:")
        if links:
            for link in links:
                lines.append(f"‚Ä¢ {link.title} ‚Äî {link.url}")
        else:
            lines.append("‚Ä¢ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ")
        lines.append("")

    if bundle.additional:
        lines.append("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:")
        for link in bundle.additional:
            lines.append(f"‚Ä¢ {link.title} ‚Äî {link.url}")
        lines.append("")

    lines.append(
        "–ù–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω–æ–µ? –ù–∞–∂–º–∏—Ç–µ ¬´üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏¬ª –≤ —Ä–∞–∑–¥–µ–ª–µ ‚ù§ –ú–æ–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã,"
    )
    lines.append("–∏ –º—ã –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—Ä—É—á–Ω—É—é.")
    return "\n".join(lines).strip()


@router.message(F.text == "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏")
async def handle_materials_request(message: Message) -> None:
    """–¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–∑–∞–≥–ª—É—à–∫–∞)."""

    await message.answer(
        "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –°–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã."
    )


@router.callback_query(F.data.startswith(MATERIALS_CALLBACK_PREFIX))
async def show_favorite_materials(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ª–∏–º–ø–∏–∞–¥—ã –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ."""

    payload = callback.data or ""
    raw_id = payload.removeprefix(MATERIALS_CALLBACK_PREFIX)
    try:
        olympiad_id = int(raw_id)
    except ValueError:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", show_alert=True)
        return

    materials_service = get_materials_service()
    bundle = await materials_service.get_materials(olympiad_id)

    olympiad_service = get_olympiad_service()
    olympiad = olympiad_service.get_olympiad(olympiad_id)
    title = olympiad.title if olympiad else "–≤—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞"

    message = callback.message
    if message is not None:
        text = _format_materials_text(title, bundle)
        await message.answer(text, disable_web_page_preview=True)
    await callback.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")


__all__ = ["router"]
